local esp = {
    enabled = true,
    teamcheck = false,
    outlines = true,
    shortnames = true,
    team_boxes = {true, Color3.fromRGB(255, 255, 255), Color3.fromRGB(1, 1, 1), 0},
    team_chams = {true, Color3.fromRGB(138, 139, 194), Color3.fromRGB(138, 139, 194), .25, .75, true},
    team_names = {true, Color3.fromRGB(255, 255, 255)},
    team_weapon = {true, Color3.fromRGB(255, 255, 255)},
    team_distance = true,
    team_health = true,
    maxdistance = 1200,
    fadefactor = 20,
    textsize = 13,
    font = 'Plex',
    maxchar = 4,
    limitdistance = false,
    visiblecheck = false,
    arrowradius = 500,
    arrowsize = 20,
    arrowinfo = false
}

local runService = game:GetService('RunService')
local coregui = game:GetService('CoreGui')
local players = game:GetService('Players')
local localPlayer = players.LocalPlayer
local camera = workspace.CurrentCamera

local function draw(type, properties)
    local instance = Drawing.new(type)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function create(type, properties)
    local instance = Instance.new(type)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local folder = create('Folder', {Parent = coregui})

local function getCharacter(player)
    return player.Character
end

local function checkAlive(player)
    return player.Character and player.Character:FindFirstChild('Humanoid') and player.Character.Humanoid.Health > 0
end

local function checkTeam(player)
    return player.Team == localPlayer.Team
end

local function checkDistance(player)
    local character = getCharacter(player)
    return character and character.PrimaryPart and (character.PrimaryPart.Position - camera.CFrame.p).Magnitude <= esp.maxdistance
end

local function checkVisible(player)
    local character = getCharacter(player)
    if not character or not character.PrimaryPart then return false end
    local ray = workspace:Raycast(camera.CFrame.p, (character.PrimaryPart.Position - camera.CFrame.p).Unit * esp.maxdistance, {IgnoreWater = true, FilterType = Enum.RaycastFilterType.Blacklist, FilterDescendantsInstances = {camera, localPlayer.Character}})
    return ray and ray.Instance:IsDescendantOf(character)
end

local function addPlayer(player)
    if player == localPlayer then return end
    local objs = {
        box = draw('Square', {Filled = false, Thickness = 1, Color = Color3.new(1, 1, 1)}),
        box_fill = draw('Square', {Filled = true, Thickness = 1}),
        box_outline = draw('Square', {Filled = false, Thickness = 1}),
        name = draw('Text', {Color = Color3.new(1, 1, 1), Font = 2, Size = esp.textsize}),
        name_outline = draw('Text', {Color = Color3.new(), Font = 2, Size = esp.textsize}),
        distance = draw('Text', {Color = Color3.new(1, 1, 1), Font = 2, Size = esp.textsize}),
        distance_outline = draw('Text', {Color = Color3.new(), Font = 2, Size = esp.textsize}),
        weapon = draw('Text', {Color = Color3.new(1, 1, 1), Font = 2, Size = esp.textsize}),
        weapon_outline = draw('Text', {Color = Color3.new(), Font = 2, Size = esp.textsize}),
        health = draw('Text', {Color = Color3.new(1, 1, 1), Font = 2, Size = esp.textsize, Center = true}),
        chams = create('Highlight', {Name = player.Name, Parent = folder})
    }
    esp.players[player.Name] = objs
end

local function removePlayer(player)
    local objs = esp.players[player.Name]
    if objs then
        for _, obj in pairs(objs) do
            if obj:IsA('Drawing') then
                obj:Remove()
            else
                obj:Destroy()
            end
        end
        esp.players[player.Name] = nil
    end
end

local function updateESP()
    for playerName, objs in pairs(esp.players) do
        local player = players:FindFirstChild(playerName)
        if not player or not checkAlive(player) then
            removePlayer(player)
            continue
        end

        local character = getCharacter(player)
        if not character or not character.PrimaryPart then
            removePlayer(player)
            continue
        end

        local distance = (character.PrimaryPart.Position - camera.CFrame.p).Magnitude
        local onScreen = camera:WorldToViewportPoint(character.PrimaryPart.Position).Z > 0

        if not onScreen or (esp.limitdistance and distance > esp.maxdistance) or (esp.teamcheck and checkTeam(player)) then
            for _, obj in pairs(objs) do
                if obj:IsA('Drawing') then
                    obj.Visible = false
                else
                    obj.Enabled = false
                end
            end
            continue
        end

        local transparency = 1 - math.clamp((distance - (esp.maxdistance - esp.fadefactor)) / esp.fadefactor, 0, 1)

        local flag = esp.teamcheck and checkTeam(player) and 'team_' or 'enemy_'

        objs.box.Visible = esp[flag .. 'boxes'][1]
        objs.box_fill.Visible = objs.box.Visible
        objs.box_outline.Visible = esp.outlines and objs.box.Visible

        if objs.box.Visible then
            local size = Vector2.new(100, 200) -- Adjust based on character size
            local position = camera:WorldToViewportPoint(character.PrimaryPart.Position)
            objs.box.Size = size
            objs.box.Position = Vector2.new(position.X, position.Y) - size / 2
            objs.box.Color = esp[flag .. 'boxes'][2]
            objs.box.Transparency = transparency

            objs.box_fill.Size = size
            objs.box_fill.Position = objs.box.Position
            objs.box_fill.Color = esp[flag .. 'boxes'][3]
            objs.box_fill.Transparency = math.min(esp[flag .. 'boxes'][4], transparency)

            objs.box_outline.Size = size
            objs.box_outline.Position = objs.box.Position + Vector2.new(1, 1)
            objs.box_outline.Transparency = transparency
        end

        objs.name.Visible = esp[flag .. 'names'][1]
        objs.name_outline.Visible = esp.outlines and objs.name.Visible

        if objs.name.Visible then
            objs.name.Text = player.Name
            objs.name.Position = objs.box.Position + Vector2.new(0, -20)
            objs.name.Color = esp[flag .. 'names'][2]
            objs.name.Transparency = transparency

            objs.name_outline.Text = objs.name.Text
            objs.name_outline.Position = objs.name.Position + Vector2.new(1, 1)
            objs.name_outline.Transparency = transparency
        end

        objs.distance.Visible = esp[flag .. 'distance']
        objs.distance_outline.Visible = esp.outlines and objs.distance.Visible

        if objs.distance.Visible then
            objs.distance.Text = string.format('[%dm]', math.floor(distance / 3))
            objs.distance.Position = objs.box.Position + Vector2.new(0, -35)
            objs.distance.Color = esp[flag .. 'names'][2]
            objs.distance.Transparency = transparency

            objs.distance_outline.Text = objs.distance.Text
            objs.distance_outline.Position = objs.distance.Position + Vector2.new(1, 1)
            objs.distance_outline.Transparency = transparency
        end

        objs.weapon.Visible = esp[flag .. 'weapon'][1]
        objs.weapon_outline.Visible = esp.outlines and objs.weapon.Visible

        if objs.weapon.Visible then
            objs.weapon.Text = character:FindFirstChildOfClass('Tool') and character:FindFirstChildOfClass('Tool').Name or 'None'
            objs.weapon.Position = objs.box.Position + Vector2.new(0, -50)
            objs.weapon.Color = esp[flag .. 'weapon'][2]
            objs.weapon.Transparency = transparency

            objs.weapon_outline.Text = objs.weapon.Text
            objs.weapon_outline.Position = objs.weapon.Position + Vector2.new(1, 1)
            objs.weapon_outline.Transparency = transparency
        end

        objs.health.Visible = esp[flag .. 'health']
        if objs.health.Visible then
            objs.health.Text = string.format('%d HP', math.floor(character.Humanoid.Health))
            objs.health.Position = objs.box.Position + Vector2.new(0, -65)
            objs.health.Color = Color3.new(1, 0, 0):Lerp(Color3.new(0, 1, 0), character.Humanoid.Health / 100)
            objs.health.Transparency = transparency
        end

        objs.chams.Enabled = esp[flag .. 'chams'][1]
        objs.chams.Adornee = character
        objs.chams.FillColor = esp[flag .. 'chams'][2]
        objs.chams.OutlineColor = esp[flag .. 'chams'][3]
        objs.chams.FillTransparency = esp[flag .. 'chams'][4]
        objs.chams.OutlineTransparency = esp[flag .. 'chams'][5]
        objs.chams.DepthMode = esp[flag .. 'chams'][6] and Enum.HighlightDepthMode.AlwaysOnTop or Enum.HighlightDepthMode.Occluded
    end
end

esp.players = {}

for _, player in pairs(players:GetPlayers()) do
    addPlayer(player)
end

players.PlayerAdded:Connect(addPlayer)
players.PlayerRemoving:Connect(removePlayer)

runService.RenderStepped:Connect(updateESP)

return esp
